load("@rules_cc//cc:defs.bzl", "cc_library")

exports_files(glob(["*.c"]))

DEFINES = ["DEBUG_PREDICATES", "DEBUG_QUERY"]

##########
cc_library(
    name  = "sealark",
    alwayslink = True,
    linkstatic = 1,
    srcs  = [
        "debug.c",  # select
        "debug.h",  # select
        "expressors.c",
        "expressors.h",
        # "constants.c",
        # "constants.h",
        "nodes.c",
        "nodes.h",
        "parse.c",
        "parse.h",
        "predicators.c",
        "predicators.h",
        "serializers.c",
        "serializers.h",
        "//vendored/logc:log.h"
   ],
    hdrs = [
        "sealark.h",           # api hdr
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + DEFINES,
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-g", "-O0",
        "-pedantic-errors",
        "-I", ".",
        "-I", "$(GENDIR)/sealark",
        "-I", "$(GENDIR)/external/moonlark/sealark",

        "-I", "vendored/uthash",
        "-I", "external/moonlark/vendored/uthash",

        "-I", "vendored/logc",
        "-I", "external/moonlark/vendored/logc",
    ],
    deps = [
        ":lexis",
        ":syntaxis",
        "//vendored/logc",
        "//vendored/uthash"
    ],
    visibility = ["//visibility:public"]
)

##########
cc_library(
    name  = "syntaxis",
    linkstatic = 1,
    visibility = ["//visibility:public"],
    srcs  = [
        "syntaxis.c",
        "syntaxis.h",
        "nodes.c",
        "nodes.h",
        "//vendored/logc:log.h",
        # "//vendored/uthash"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",
        # "-g",

        "-I", ".",              # syntaxis.h

        "-I", "$(GENDIR)/sealark",
        "-I", "$(GENDIR)/external/moonlark/sealark",

        "-I", "vendored/logc",
        "-I", "external/moonlark/vendored/logc",

        "-I", "vendored/uthash",
        "-I", "external/moonlark/vendored/uthash",

        "-U", "NDEBUG"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    deps = [
        "//vendored/logc",
        "//vendored/uthash"
    ]
)

########
genrule(
    name = "gen_syntaxis",
    srcs = [
        "syntaxis.y",
        "//vendored/lemon:lempar.c"
    ],
    tools = ["//vendored/lemon"],
    outs  = [
        "syntaxis.c",
        "syntaxis.out"
    ],
    cmd   = "\n".join([
        "$(location //vendored/lemon) -m \\",
        "$(location syntaxis.y) \\",
        "-T$(location //vendored/lemon:lempar.c) \\",
        "-DTEST \\",
        "-d$(RULEDIR)",
    ]),
    visibility = ["//visibility:public"]
)

###########
cc_library(
    name  = "lexis",
    # alwayslink = True,
    linkstatic = 1,
    visibility = ["//visibility:public"],
    srcs  = [
        "lexis.c",
        "lexis.h",
        "nodes.c",
        "nodes.h",
        "debug.c",
        "debug.h",
        "//vendored/logc:log.h",
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I", "src",

        "-I", "$(GENDIR)/sealark",
        "-I", "$(GENDIR)/external/moonlark/sealark",

        "-I", "vendored/uthash",
        "-I", "external/moonlark/vendored/uthash",

        "-I", "vendored/logc",
        "-I", "external/moonlark/vendored/logc",
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    deps = [
        "//vendored/logc",
        "//vendored/uthash",
    ]
)

########
genrule(
    name = "gen_lexis",
    srcs = [
        "lexis.re",
        # "test.re",
    ],
    tools = ["//vendored/re2c"],
    outs  = [
        "lexis.c"
    ],
    cmd   = "\n".join([
        "for f in $(locations //vendored/re2c)",
        "do",
        "    if [ -f $$f ]",
        "    then",
        "        if [ re2c = `basename $$f` -a -x $$f ]",
        "        then",
        "            break",
        "        fi",
        "    fi",
        "done",
        "$$f --conditions --tags -o $(@D)/lexis.c $(location lexis.re)",
    ]),
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        # "constants.c",
        "expressors.c",
        "lexis.c",
        "nodes.c",
        "parse.c",
        "predicators.c",
        "syntaxis.c",
        "serializers.c",
        "debug.c",
        # "//vendored/uthash",
    ],
    outs = [
        # "constants.h",
        "expressors.h",
        "lexis.h",
        "nodes.h",
        "parse.h",
        "predicators.h",
        "syntaxis.h",
        "serializers.h",
        "debug.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location parse.c)",
        "SRCDIR1=`dirname $$SRC1`",
        # "SRC2=$(location //vendored/uthash/utarray.h)",
        # "SRCDIR2=`dirname $$SRC2`",
        "$(location //vendored/makeheaders) \\",
        # "    $(locations //vendored/uthash) \\",
        # "    $(location constants.c) \\",
        "    $(location expressors.c) \\",
        "    $(location lexis.c) \\",
        "    $(location nodes.c) \\",
        "    $(location parse.c) \\",
        "    $(location predicators.c) \\",
        "    $(location syntaxis.c) \\",
        "    $(location serializers.c) \\",
        "    $(location debug.c) ",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)

genrule(
    name = "mkhdrs-export",
    srcs = [
        "constants.c",
        "expressors.c",
        "lexis.c",
        "nodes.c",
        "parse.c",
        "predicators.c",
        "syntaxis.h",
        "serializers.c",
        "debug.c",
        # "test_lex.c",
        # "test_parse.c",
        # "//vendored/uthash",
    ],
    outs = [
        "sealark.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location parse.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location //vendored/makeheaders) -H \\",
        # "    $(locations //vendored/uthash) \\",
        "    $(location constants.c) \\",
        "    $(location expressors.c) \\",
        "    $(location lexis.c) \\",
        "    $(location nodes.c) \\",
        "    $(location parse.c) \\",
        "    $(location predicators.c) \\",
        "    $(location serializers.c) \\",
        "    $(location syntaxis.h) \\",
        "    $(location debug.c) \\",
        "    > $@",
    ]),
    tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)
