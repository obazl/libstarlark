load("@rules_cc//cc:defs.bzl", "cc_library")
load("@makeheaders//src:RULES.bzl", "makeheaders")
TOOLCHAINS = ["//:test_module_profiles"]

test_suite(
    name = "parser",
    tests = [
        ":call",
        ":dict",
        ":expressions",
        ":keywords",
        ":lists",
        ":numbers",
        ":punctuation",
        ":slices",
        ":statements",
        ":strings",
    ])

# LEXIS
cc_test(
    name = "keywords",
    srcs = [
        "lex_keywords.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",
        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",
        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "numbers",
    srcs = [
        "lex_numbers.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "punctuation",
    srcs = [
        "lex_punctuation.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "strings",
    srcs = [
        "lex_strings.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

# SYNTAX
cc_test(
    name = "call",
    srcs = [
        "syntax_call_expr.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "dict",
    srcs = [
        "syntax_dict.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

       "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "expressions",
    srcs = [
        "syntax_expressions.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "lists",
    srcs = [
        "syntax_lists.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "slices",
    srcs = [
        "syntax_slices.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

cc_test(
    name = "statements",
    srcs = [
        "syntax_statements.c",
        ":mkhdrs"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/parser",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "//src:sealark_debug.c",
        # "roundtrip_starlark.c",
        # "roundtrip_moonlark.c",
        # "roundtrip_helper.c",
        "lex_keywords.c",
        "lex_numbers.c",
        "lex_punctuation.c",
        "lex_strings.c",
        "syntax_call_expr.c",
        "syntax_dict.c",
        "syntax_expressions.c",
        "syntax_lists.c",
        "syntax_slices.c",
        "syntax_statements.c",
        # "lex_file.c",
        # "lua_file.c",
        # "parse_file.c",
    ],
    # outs = [
    #     "lex_keywords.h",
    #     "lex_numbers.h",
    #     "lex_punctuation.h",
    #     "lex_strings.h",
    #     "syntax_call_expr.h",
    #     "syntax_dict.h",
    #     "syntax_expressions.h",
    #     "syntax_lists.h",
    #     "syntax_slices.h",
    #     "syntax_statements.h",
    #     # "lex_file.h",
    #     # "lua_file.h",
    #     # "parse_file.h",
    # ],
    # cmd = "\n".join([
    #     "SRC1=$(location lex_strings.c)",
    #     "SRCDIR1=`dirname $$SRC1`",
    #     "$(location //vendored/makeheaders) \\",
    #     "    $(location //sealark:debug.c) \\",
    #     "    $(location lex_keywords.c) \\",
    #     "    $(location lex_numbers.c) \\",
    #     "    $(location lex_punctuation.c) \\",
    #     "    $(location lex_strings.c) \\",
    #     "    $(location syntax_call_expr.c) \\",
    #     "    $(location syntax_dict.c) \\",
    #     "    $(location syntax_expressions.c) \\",
    #     "    $(location syntax_lists.c) \\",
    #     "    $(location syntax_slices.c) \\",
    #     "    $(location syntax_statements.c)",
    #     # "    $(location lex_file.c) \\",
    #     # "    $(location lua_file.c) \\",
    #     # "    $(location parse_file.c)",
    #     "cp $${SRCDIR1}/*.h $(@D)",
    # ]),
    # tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)
