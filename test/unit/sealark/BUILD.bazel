load("@rules_cc//cc:defs.bzl", "cc_library")
load("@makeheaders//src:RULES.bzl", "makeheaders")
TOOLCHAINS = ["//:test_module_profiles"]

test_suite(
    name = "sealark",
    tests = [
    ])

cc_test(
    name = "buildfile_expressors",
    srcs = [
        "buildfile_expressors.c",
        ":mkhdrs"
    ],
    data = [
        "//test/data/cc:BUILD.test"
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/unit/sealark",

        "-I$(@liblogc)/src",
        "-I$(@unity)/src",
        "-I$(@uthash)/src",
    ],
    linkstatic = 1,
    deps = [
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash"
    ],
    timeout    = "short",
    toolchains = TOOLCHAINS
)

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "//src:sealark_debug.c",
        "buildfile_expressors.c",
    ],
    # outs = [
    #     "buildfile_expressors.h",
    # ],
    # cmd = "\n".join([
    #     "SRC1=$(location buildfile_expressors.c)",
    #     "SRCDIR1=`dirname $$SRC1`",
    #     "$(location //vendored/makeheaders) \\",
    #     "    $(location //sealark:debug.c) \\",
    #     "    $(location buildfile_expressors.c)",
    #     "cp $${SRCDIR1}/*.h $(@D)",
    # ]),
    # tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)
