load("@rules_cc//cc:defs.bzl", "cc_library")
load("@makeheaders//src:RULES.bzl", "makeheaders")
TOOLCHAINS = ["//:test_module_profiles"]

test_suite(
    name = "sys",
    tests = [
        ":sealark",
        # ":starlark",
    ])

cc_test(
    name = "sealark",
    linkstatic = 1,
    srcs = [
        "test_starlark.c",
        "starlark_roundtrip.c",
        ":mkhdrs"
        # "//starlark:config.c",
        # "test_starlark.h",
        # "starlark_roundtrip.h",
        # "//starlark:config.h",
    ],
    data = [ # NB: globbing does not seem to work
        # "//test/lua:serialize.lua",

        "//test/data/android:BUILD.test",
        "//test/data/cc:BUILD.test",
        "//test/data/filegroup:BUILD.bazel",
        # "//test/data/gen:BUILD.bazel",
        "//test/data/load/aliases/test1:BUILD.test",
        "//test/data/load/aliases/test2:BUILD.test",
        "//test/data/load/comments:BUILD.test",
        # "//test/data/load/test1:BUILD.test",
        "//test/data/load/test2:BUILD.test",
        "//test/data/load/test3:BUILD.test",
        "//test/data/python:BUILD.test",
        "//test/data/python/native:BUILD.test",
        "//test/data/shell:BUILD.test",
        "//test/data/windows/dll:BUILD.test",
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test/sys",

        # "-I$(GENDIR)/starlark",
        # "-I$(GENDIR)/external/starlark/starlark",

        # "-I$(GENDIR)/starlark",

        # "-I", "$(GENDIR)/src/lib/starlark",
        # "-I", "$(GENDIR)external/starlark/src/lib/starlark",

        # "-I", "$(GENDIR)/src/lib/starlark",
        # "-I", "$(GENDIR)/external/starlark/src/lib/starlark", # libstarlark.h

        "-I$(@liblogc)/src",
        "-I$(@uthash)/src",
        "-I$(@unity)/src",

        # "-I", "vendored/lua-5.4.3/src",
        # "-I", "external/starlark/vendored/lua-5.4.3/src",

    ],
    deps = [
        # "//starlark:config",
        # "//src/lib/lbazel",
        "//src:sealark",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "@uthash//src:uthash",
        # pulled in by starlark
        # "//vendored/lua-5.4.3/src:lua",
    ],
    toolchains = TOOLCHAINS
)

# cc_test(
#     name = "starlark",
#     srcs = [
#         "test_starlark.c",
#         "starlark_roundtrip.c",
#         ":mkhdrs"
#         # "test_starlark.h",
#         # "starlark_roundtrip.h",
#     ],
#     data = [ # NB: globbing does not seem to work
#         "//test/data/android:BUILD.bazel",
#         "//test/data/cpp:BUILD.bazel",
#         "//test/data/filegroup:BUILD.bazel",
#         "//test/data/gen:BUILD.bazel",
#         "//test/data/load/aliases/test1:BUILD.bazel",
#         "//test/data/load/aliases/test2:BUILD.bazel",
#         "//test/data/load/comments:BUILD.bazel",
#         "//test/data/load/test1:BUILD.bazel",
#         "//test/data/load/test2:BUILD.bazel",
#         "//test/data/load/test3:BUILD.bazel",
#         "//test/data/python:BUILD.bazel",
#         "//test/data/python/native:BUILD.bazel",
#         "//test/data/shell:BUILD.bazel",
#         "//test/data/windows/dll:BUILD.bazel",
#     ],
#     copts = select({
#         # strdup is non-standard, not supported on linux in strict c11 mode
#         "//bzl/host:macos": ["-std=c11"],
#         "//bzl/host:linux": ["-std=gnu11"],
#         "//conditions:default": ["-std=c11"],
#     }) + [
#         "-pedantic-errors",

#         "-I$(GENDIR)/src/lib/starlark",
#         "-I$(GENDIR)/test/sys",
#         "-I$(@liblogc)/src",
#         "-I$(@unity)/src",
#         "-I$(@uthash)/src",

#         # "-Ivendored/logc",
#         # "-Ivendored/unity",

#         # "-I", "vendored/uthash",
#         # "-I", "external/starlark/vendored/uthash",
#     ],
#     deps = [
#         "//src/lib/starlark",
#         "@liblogc//src:logc",
#         "@unity//src:unity",
#         "@uthash//src:uthash"
#     ],
#     toolchains = TOOLCHAINS
# )

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        # "//starlark:config.c",
        "//src:sealark_debug.c",
        # "//src/lib/lbazel:lbazel.c",
        "starlark_roundtrip.c",
        "test_starlark.c"
    ],
    # outs = [
    #     "starlark_roundtrip.h",
    #     "starlark_roundtrip.h",
    #     "test_starlark.h",
    #     "test_starlark.h",
    #     # "lex_keywords.h",
    #     # "lex_numbers.h",
    #     # "lex_punctuation.h",
    #     # "lex_strings.h",
    #     # "syntax_call_expr.h",
    #     # "syntax_dict.h",
    #     # "syntax_expressions.h",
    #     # "syntax_lists.h",
    #     # "syntax_slices.h",
    #     # "syntax_statements.h",
    # ],
    # cmd = "\n".join([
    #     "SRC1=$(location starlark_roundtrip.c)",
    #     "SRCDIR1=`dirname $$SRC1`",
    #     "$(location //vendored/makeheaders) \\",
    #     "    $(location //starlark:config.c) \\",
    #     "    $(location //src/lib/lbazel:lbazel.c) \\",
    #     "    $(location //src/lib/starlark:debug.c) \\",
    #     "    $(location starlark_roundtrip.c) \\",
    #     "    $(location starlark_roundtrip.c) \\",
    #     "    $(location test_starlark.c) \\",
    #     "    $(location test_starlark.c)",
    #     # "    $(location lex_keywords.c) \\",
    #     # "    $(location lex_numbers.c) \\",
    #     # "    $(location lex_punctuation.c) \\",
    #     # "    $(location lex_strings.c) \\",
    #     # "    $(location syntax_call_expr.c) \\",
    #     # "    $(location syntax_dict.c) \\",
    #     # "    $(location syntax_expressions.c) \\",
    #     # "    $(location syntax_lists.c) \\",
    #     # "    $(location syntax_slices.c) \\",
    #     # "    $(location syntax_statements.c)",
    #     "cp $${SRCDIR1}/*.h $(@D)",
    # ]),
    # tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)
