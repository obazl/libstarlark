load("@rules_cc//cc:defs.bzl", "cc_library")

################################################################
## testing lexis, syntaxis

cc_binary(
    name  = "lex_file",
    srcs  = [
        "lex_file.c",
        "lex_file.h",
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I", "$(GENDIR)/sealark",
        "-I", "$(GENDIR)/test",

        "-I", "vendored/logc",
        # "-I", "external/obazl/vendored/logc",
        # "-I", "external/tools_obazl/vendored/logc",

        "-I", "vendored/uthash",
    ],
    defines = ["DEBUG", "DEBUG_TRACE"],
    deps = [
        "//sealark",
        "//vendored/logc",
        "//vendored/uthash",
    ],
    # linkopts = select({
    #     "//bzl/host:linux": [],
    #     "//bzl/host:macos": ["-framework", "CoreServices"],
    # }),
    linkstatic = 1
)

##########
cc_binary(
    name  = "parse_file",
    srcs  = [
        "parse_file.c",
        "parse_file.h",
        # "//sealark:sealark_debug.c",
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I", "$(GENDIR)/sealark",
        "-I", "$(GENDIR)/test",

        "-I", "vendored/logc",
        # "-I", "external/obazl/vendored/logc",
        # "-I", "external/tools_obazl/vendored/logc",

        "-Ivendored/uthash",
    ],
    defines = ["DEBUG", "DEBUG_TRACE"],
    deps = [
        "//sealark",
        "//vendored/logc",
        "//vendored/uthash",
    ],
    linkstatic = 1
)

##########
# parse a buildfile and pass it to lua handler

## WARNING: currently broken

# cc_binary(
#     name  = "lua_file",
#     srcs  = [
#         "lua_file.c",
#         "lua_file.h",
#         "//sealark:sealark_debug.c",
#     ],
#     data = [
#         "//moonlark/lua:edit.lua"
#     ],
#     defines = ["DEBUG", "DEBUG_TRACE"],
#     copts = select({
#         # strdup is non-standard, not supported on linux in strict c11 mode
#         "//bzl/host:macos": ["-std=c11"],
#         "//bzl/host:linux": ["-std=gnu11"],
#         "//conditions:default": ["-std=c11"],
#     }) + [
#         "-pedantic-errors",

#         "-I", "$(GENDIR)/bindings/lua",
#         "-I", "$(GENDIR)/external/moonlark/bindings/lua",

#         "-I", "$(GENDIR)/sealark",
#         "-I", "$(GENDIR)/external/moonlark/sealark",

#         "-I", "$(GENDIR)/test",
#         "-I", "$(GENDIR)/external/moonlark/test",

#         "-I", "vendored/logc",
#         "-I", "external/obazl/vendored/logc",
#         "-I", "external/tools_obazl/vendored/logc",

#         "-I", "vendored/lua-5.4.3/src",

#         "-Ivendored/uthash",
#     ],
#     deps = [
#         "//bindings/lua:moonlark",
#         "//vendored/logc",
#         "//vendored/lua-5.4.3/src:lua",
#         "//vendored/uthash",
#     ],
#     linkstatic = 1
# )

################################################################
genrule(
    name = "mkhdrs",
    srcs = [
        "lex_file.c",
        "lua_file.c",
        "parse_file.c",
        # "//bindings/lua:lbazel.c",
        "//bindings/lua:libmoonlark.c",
        # "//sealark:sealark_debug.c",
        "//sealark:mkhdrs-export",
    ],
    outs = [
        "lex_file.h",
        "lua_file.h",
        "parse_file.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location lex_file.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location //vendored/makeheaders) \\",
        # "    $(location //bindings/lua:lbazel.c) \\",
        "    $(location //bindings/lua:libmoonlark.c) \\",
        # "    $(location //sealark:sealark_debug.c) \\",
        "    $(location //sealark:mkhdrs-export) \\",
        "    $(location lex_file.c) \\",
        "    $(location lua_file.c) \\",
        "    $(location parse_file.c)",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)
