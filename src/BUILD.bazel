load("@rules_cc//cc:defs.bzl", "cc_library")

# we export these srcs so //src/include/obazl:mkhdrs can generate the export interface obazl.h
exports_files(glob(["*.c"]))

##########
cc_library(
    name  = "starlark",
    # alwayslink = True,
    linkstatic = 1,
    srcs  = [
        "obazl_starlark.c",
        "obazl_starlark.h",
        "obazl_starlark_serialize.c",
        "obazl_starlark_serialize.h",
    ],
    hdrs = [
        "@uthash//:include",
        "//vendored/logc:log.h"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    copts = [
        "-std=c11",
        "-g", "-O0",
        "-I", ".",
        "-I", "$(GENDIR)/src",
        "-I", "$(GENDIR)/external/obazl/src",
        "-I", "$(GENDIR)/external/tools_obazl/src",

        "-I", "external/uthash/include",
        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc"
    ],
    deps = [
        ":obazl_starlark_lexer",
        ":obazl_starlark_parser",
        "//vendored/logc"
    ],
    visibility = ["//visibility:public"]
)

##########
cc_library(
    name  = "obazl_starlark_parser",
    visibility = ["//visibility:public"],
    srcs  = [
        "obazl_starlark_parser.c",
        "obazl_starlark_parser.h",
        "obazl_starlark_nodes.c",
        "obazl_starlark_nodes.h",
        "@uthash//:include"
    ],
    copts = [
        "-std=c11",
        # "-g",
        "-I", "$(GENDIR)/src",
        "-I", "external/uthash/include",
        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",
        "-U", "NDEBUG"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    linkstatic = 1,
    deps = [
        "//vendored/logc"
    ]
)

########
genrule(
    name = "gen_parser",
    srcs = [
        "obazl_starlark_parser.y",
        "//vendored/lemon:lempar.c"
    ],
    tools = ["//vendored/lemon"],
    outs  = [
        "obazl_starlark_parser.c",
        "obazl_starlark_parser.out"
    ],
    cmd   = "\n".join([
        "$(location //vendored/lemon) -m \\",
        "$(location obazl_starlark_parser.y) \\",
        "-T$(location //vendored/lemon:lempar.c) \\",
        "-DTEST \\",
        "-d$(RULEDIR)",
    ]),
    visibility = ["//visibility:public"]
)

###########
cc_library(
    name  = "obazl_starlark_lexer",
    visibility = ["//visibility:public"],
    srcs  = [
        "obazl_starlark_lexer.c",
        "obazl_starlark_lexer.h",
        "obazl_starlark_nodes.c",
        "obazl_starlark_nodes.h",
        "token_debug.c",
        "token_debug.h",
        "@uthash//:include",
    ],
    copts = [
        "-std=c11",
        "-I", ".",
        "-I", "src/lib/obazl_starlark",
        "-I", "$(GENDIR)/src",

        "-I", "external/uthash/include",
        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    linkstatic = 1,
    deps = [
        "//vendored/logc"
    ]
)

########
genrule(
    name = "gen_lexer",
    srcs = [
        "obazl_starlark_lexer.re",
        "literals.re",
    ],
    tools = ["//external/re2c"],
    outs  = [
        "obazl_starlark_lexer.c"
    ],
    cmd   = "\n".join([
        "for f in $(locations //external/re2c)",
        "do",
        "    if [ -f $$f ]",
        "    then",
        "        if [ re2c = `basename $$f` -a -x $$f ]",
        "        then",
        "            break",
        "        fi",
        "    fi",
        "done",
        "$$f --conditions --tags -o $(@D)/obazl_starlark_lexer.c $(location obazl_starlark_lexer.re)",
    ]),
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        "obazl_starlark.c",
        "obazl_starlark_lexer.c",
        "obazl_starlark_nodes.c",
        "obazl_starlark_parser.c",
        "obazl_starlark_serialize.c",
        "token_debug.c",
        "test_lex.c",
        "test_parse.c",
    ],
    outs = [
        "obazl_starlark.h",
        "obazl_starlark_lexer.h",
        "obazl_starlark_nodes.h",
        "obazl_starlark_parser.h",
        "obazl_starlark_serialize.h",
        "token_debug.h",
        "test_lex.h",
        "test_parse.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location obazl_starlark.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location @makeheaders//:makeheaders) \\",
        "    $(location obazl_starlark.c) \\",
        "    $(location obazl_starlark_lexer.c) \\",
        "    $(location obazl_starlark_nodes.c) \\",
        "    $(location obazl_starlark_parser.c) \\",
        "    $(location obazl_starlark_serialize.c) \\",
        "    $(location token_debug.c) \\",
        "    $(location test_lex.c) \\",
        "    $(location test_parse.c)",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["@makeheaders//:makeheaders"],
    visibility = ["//visibility:public"]
)

################################################################
## testing lexer, parser

cc_binary(
    name  = "test_lex",
    srcs  = [
        "test_lex.c",
        "test_lex.h",
        "obazl_starlark.c",
        "obazl_starlark.h",
        "token_debug.c",
        "token_debug.h",
        "obazl_starlark_nodes.c",
        "obazl_starlark_nodes.h",
        "obazl_starlark_lexer.c",
        "obazl_starlark_lexer.h",
        "obazl_starlark_serialize.c",
        "obazl_starlark_serialize.h",
        "@uthash//:include",
    ],
    copts = [
        "-std=c11",
        "-pedantic-errors",

        "-I", "src/lib/obazl_starlark",

        "-I", "$(GENDIR)/src",
        "-I", "$(GENDIR)/external/tools_obazl/src",

        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",

        "-I", "external/uthash/include",
    ],
    deps = [
        ":obazl_starlark_lexer",
        ":obazl_starlark_parser",
        "//vendored/logc"
    ],
    # linkopts = select({
    #     "//bzl/host:linux": [],
    #     "//bzl/host:macos": ["-framework", "CoreServices"],
    # }),
    linkstatic = 1
)

##########
cc_binary(
    name  = "test_parse",
    srcs  = [
        "test_parse.c",
        "test_parse.h",
        "obazl_starlark.c",
        "obazl_starlark.h",
        "token_debug.c",
        "token_debug.h",
        "obazl_starlark_nodes.c",
        "obazl_starlark_nodes.h",
        "obazl_starlark_serialize.c",
        "obazl_starlark_serialize.h",
        "@uthash//:include",
    ],
    defines = ["DEBUG", "DEBUG_TRACE"],
    copts = [
        "-std=c11",
        "-pedantic-errors",

        "-I", "src/lib/obazl_starlark",
        "-I", "$(GENDIR)/src",
        "-I", "$(GENDIR)/external/tools_obazl/src",

        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",

        "-I", "external/uthash/include",
    ],
    deps = [
        ":obazl_starlark_lexer",
        ":obazl_starlark_parser",
        "//vendored/logc"
    ],
    linkstatic = 1
)
