load("@rules_cc//cc:defs.bzl", "cc_library")
load("@bazel_skylib//rules:common_settings.bzl", "string_list_flag")

load("//:BUILD.bzl", DEFINES="debug_defs") #FIXME: DEBUG_DEFINES
load(":BUILD.bzl", "gensyntax")

load("@makeheaders//src:RULES.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

exports_files(glob(["*.c"]))

TOOLCHAINS = ["//:module_profiles"]

## to enable parser/lexer debugging pass --//sealark:debug=bindings,vectors,...
string_list_flag(name = "yydebug", build_setting_default = [])
config_setting(name = "yydebug-dicts", flag_values = {":yydebug": "dicts"})
config_setting(name = "yydebug-targets", flag_values = {":yydebug": "targets"})
config_setting(name = "yydebug-loads", flag_values = {":yydebug": "loads"})
config_setting(name = "yydebug-vectors", flag_values = {":yydebug": "vectors"})

pubic_header = "sealark.h"

###########
cc_library(
    name  = "sealark",
    alwayslink = True,
    linkstatic = 1,
    srcs  = [
        "expressors.c",
        "sealark_parsers.c",
        "sealark_binding_mutators.c",
        "sealark_bindings.c",
        "sealark_ctors.c",
        "sealark_debug.c",
        "sealark_dictionaries.c",
        "sealark_errors.c",
        "sealark_format.c",
        "sealark_loadstmts.c",
        "sealark_loadstmts_set.c",
        "sealark_mutators.c",
        "sealark_nodes.c",
        "sealark_package.c",
        "sealark_predicators.c",
        "sealark_procs.c",
        "sealark_serializers.c",
        "sealark_targets.c",
        "sealark_vectors.c",
        ":mkhdrs"
   ],
    hdrs = [pubic_header],
    defines = DEFINES,
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",
        "-I", ".",
        "-I", "$(GENDIR)/src",
        "-I", "$(GENDIR)/external/sealark/src",

        "-I$(@liblogc)//src",
        "-I$(@uthash)//src",

        # "-I", "vendored/uthash",
        # "-I", "external/sealark/vendored/uthash",
        # "-I", "vendored/logc",
        # "-I", "external/sealark/vendored/logc",
    ],
    deps = [
        ":lexis",
        ":syntaxis",
        # "//vendored/logc",
        # "//vendored/uthash"
        "@liblogc//src:logc",
        "@uthash//src:uthash"
    ],
    visibility = ["//visibility:public"],
    toolchains = TOOLCHAINS
)

##########
cc_library(
    name  = "syntaxis",
    linkstatic = 1,
    visibility = ["//visibility:public"],
    srcs  = [
        "syntaxis.c",
        "sealark_nodes.c",
        ":mkhdrs"
        # "syntaxis.h",
        # "sealark_nodes.h",
        # "//vendored/logc:log.h",
        # "//vendored/uthash"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",
        # "-g",

        "-I", ".",              # syntaxis.h

        "-I", "$(GENDIR)/src",
        "-I", "$(GENDIR)/external/sealark/src",

        # "-I", "vendored/logc",
        # "-I", "external/sealark/vendored/logc",
        # "-I", "vendored/uthash",
        # "-I", "external/sealark/vendored/uthash",

        "-I$(@liblogc)//src",
        "-I$(@uthash)//src",

        "-U", "NDEBUG"
    ],
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash"
        # "//vendored/logc",
        # "//vendored/uthash"
    ],
    toolchains = TOOLCHAINS
)

################
lemon(
    name = "gensyntaxis",
    yy   = "syntaxis.y",
    outs = ["syntaxis.c","syntaxis.out"],
    defines = select({
        ":yydebug-vectors": ["YYDEBUG_VECTORS"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-dicts": ["YYDEBUG_DICTS"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-targets": ["YYDEBUG_TARGETS"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-loads": ["YYDEBUG_LOADSTMTS"],
        "//conditions:default":   []
    })
)

########
# gensyntax(
#     name = "gensyntaxis",
#     outs = ["syntaxis.c","syntaxis.out"],
#     defines = select({
#         ":yydebug-vectors": ["YYDEBUG_VECTORS"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-dicts": ["YYDEBUG_DICTS"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-targets": ["YYDEBUG_TARGETS"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-loads": ["YYDEBUG_LOADSTMTS"],
#         "//conditions:default":   []
#     })
# )

###########
cc_library(
    name  = "lexis",
    # alwayslink = True,
    linkstatic = 1,
    visibility = ["//visibility:public"],
    srcs  = [
        "lexis.c",
        "sealark_nodes.c",
        "sealark_debug.c",
        ":mkhdrs"
        # "lexis.h",
        # "sealark_nodes.h",
        # "sealark_debug.h",
        # "//vendored/logc:log.h",
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",

        "-I", "src",

        "-I", "$(GENDIR)/src",
        "-I", "$(GENDIR)/external/sealark/src",

        "-I$(@liblogc)//src",
        "-I$(@uthash)//src",

        # "-I", "vendored/uthash",
        # "-I", "external/sealark/vendored/uthash",
        # "-I", "vendored/logc",
        # "-I", "external/sealark/vendored/logc",
    ],
    defines = select({
        "//bzl/host:debug": [],
        "//conditions:default":   []
    }),
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash"
        # "//vendored/logc",
        # "//vendored/uthash",
    ],
    toolchains = TOOLCHAINS
)

########
genrule(
    name  = "gen_lexis",
    srcs  = ["lexis.re"],
    outs  = ["lexis.c"],
    tools = ["@re2c//:re2c"],
    cmd   = "\n".join([
        "for f in $(locations @re2c//:re2c)",
        "do",
        "    if [ -f $$f ]",
        "    then",
        "        if [ re2c = `basename $$f` -a -x $$f ]",
        "        then",
        "            break",
        "        fi",
        "    fi",
        "done",
        "$$f --conditions --tags -o $(@D)/lexis.c $(location lexis.re)",
    ]),
    visibility = ["//visibility:public"]
)

################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        # "constants.c",
        "expressors.c",
        "lexis.c",
        "sealark_parsers.c",
        "syntaxis.c",
        "sealark_binding_mutators.c",
        "sealark_bindings.c",
        "sealark_ctors.c",
        "sealark_debug.c",
        "sealark_dictionaries.c",
        "sealark_errors.c",
        "sealark_format.c",
        "sealark_loadstmts.c",
        "sealark_loadstmts_set.c",
        "sealark_mutators.c",
        "sealark_nodes.c",
        "sealark_package.c",
        "sealark_predicators.c",
        "sealark_procs.c",
        "sealark_serializers.c",
        "sealark_targets.c",
        "sealark_vectors.c",
        # "//vendored/uthash",
    ],
)
########
# genrule(
#     name = "mkhdrs",
#     srcs = [
#         # "constants.c",
#         "expressors.c",
#         "lexis.c",
#         "sealark_parsers.c",
#         "syntaxis.c",
#         "sealark_binding_mutators.c",
#         "sealark_bindings.c",
#         "sealark_ctors.c",
#         "sealark_debug.c",
#         "sealark_dictionaries.c",
#         "sealark_errors.c",
#         "sealark_format.c",
#         "sealark_loadstmts.c",
#         "sealark_loadstmts_set.c",
#         "sealark_mutators.c",
#         "sealark_nodes.c",
#         "sealark_package.c",
#         "sealark_predicators.c",
#         "sealark_procs.c",
#         "sealark_serializers.c",
#         "sealark_targets.c",
#         "sealark_vectors.c",
#         # "//vendored/uthash",
#     ],
#     outs = [
#         # "constants.h",
#         "expressors.h",
#         "lexis.h",
#         "sealark_parsers.h",
#         "syntaxis.h",
#         "sealark_binding_mutators.h",
#         "sealark_bindings.h",
#         "sealark_ctors.h",
#         "sealark_debug.h",
#         "sealark_dictionaries.h",
#         "sealark_errors.h",
#         "sealark_format.h",
#         "sealark_loadstmts.h",
#         "sealark_loadstmts_set.h",
#         "sealark_mutators.h",
#         "sealark_nodes.h",
#         "sealark_package.h",
#         "sealark_predicators.h",
#         "sealark_procs.h",
#         "sealark_serializers.h",
#         "sealark_targets.h",
#         "sealark_vectors.h",
#     ],
#     cmd = "\n".join([
#         "SRC1=$(location sealark_parsers.c)",
#         "SRCDIR1=`dirname $$SRC1`",
#         # "SRC2=$(location //vendored/uthash/utarray.h)",
#         # "SRCDIR2=`dirname $$SRC2`",
#         "$(location //vendored/makeheaders) \\",
#         # "    $(locations //vendored/uthash) \\",
#         # "    $(location constants.c) \\",
#         "    $(location expressors.c) \\",
#         "    $(location lexis.c) \\",
#         "    $(location sealark_parsers.c) \\",
#         "    $(location syntaxis.c) \\",
#         "    $(location sealark_binding_mutators.c) \\",
#         "    $(location sealark_bindings.c) \\",
#         "    $(location sealark_ctors.c) \\",
#         "    $(location sealark_debug.c) \\",
#         "    $(location sealark_dictionaries.c) \\",
#         "    $(location sealark_errors.c) \\",
#         "    $(location sealark_format.c) \\",
#         "    $(location sealark_loadstmts.c) \\",
#         "    $(location sealark_loadstmts_set.c) \\",
#         "    $(location sealark_mutators.c) \\",
#         "    $(location sealark_nodes.c) \\",
#         "    $(location sealark_package.c) \\",
#         "    $(location sealark_predicators.c) \\",
#         "    $(location sealark_procs.c) \\",
#         "    $(location sealark_serializers.c) \\",
#         "    $(location sealark_targets.c) \\",
#         "    $(location sealark_vectors.c)",
#         "cp $${SRCDIR1}/*.h $(@D)",
#     ]),
#     tools = ["//vendored/makeheaders"],
#     visibility = ["//visibility:public"]
# )

makeheaders(
    name = "mkhdrs-export",
    out  = "sealark.h",
    export_interface = True,
    hdrs_srcs = [
        "constants.c",
        "expressors.c",
        "lexis.c",
        "syntaxis.c",
        "sealark_parsers.c",
        "sealark_binding_mutators.c",
        "sealark_bindings.c",
        "sealark_ctors.c",
        "sealark_debug.c",
        "sealark_dictionaries.c",
        "sealark_errors.c",
        "sealark_format.c",
        "sealark_loadstmts.c",
        "sealark_loadstmts_set.c",
        "sealark_mutators.c",
        "sealark_nodes.c",
        "sealark_package.c",
        "sealark_predicators.c",
        "sealark_procs.c",
        "sealark_serializers.c",
        "sealark_targets.c",
        "sealark_vectors.c",
        # "test_lex.c",
        # "test_parse.c",
        # "//vendored/uthash",
    ],
    additional_srcs = [
        # "syntaxis.h",
    ],
    visibility = ["//visibility:public"]

    # outs = [
    #     "sealark.h",
    # ],
    # cmd = "\n".join([
    #     "SRC1=$(location sealark_parsers.c)",
    #     "SRCDIR1=`dirname $$SRC1`",
    #     "$(location //vendored/makeheaders) -H \\",
    #     # "    $(locations //vendored/uthash) \\",
    #     "    $(location constants.c) \\",
    #     "    $(location expressors.c) \\",
    #     "    $(location lexis.c) \\",
    #     "    $(location sealark_parsers.c) \\",
    #     "    $(location sealark_binding_mutators.c) \\",
    #     "    $(location sealark_bindings.c) \\",
    #     "    $(location sealark_ctors.c) \\",
    #     "    $(location sealark_debug.c) \\",
    #     "    $(location sealark_dictionaries.c) \\",
    #     "    $(location sealark_errors.c) \\",
    #     "    $(location sealark_format.c) \\",
    #     "    $(location sealark_loadstmts.c) \\",
    #     "    $(location sealark_loadstmts_set.c) \\",
    #     "    $(location sealark_mutators.c) \\",
    #     "    $(location sealark_nodes.c) \\",
    #     "    $(location sealark_package.c) \\",
    #     "    $(location sealark_predicators.c) \\",
    #     "    $(location sealark_procs.c) \\",
    #     "    $(location sealark_serializers.c) \\",
    #     "    $(location sealark_targets.c) \\",
    #     "    $(location sealark_vectors.c) \\",
    #     "    $(location syntaxis.h) \\",
    #     "    > $@",
    # ]),
    # tools = ["//vendored/makeheaders"],
)
